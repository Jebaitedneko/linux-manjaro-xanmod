From da25990b9e339fcef8836f19a20f3818c762e4dc Mon Sep 17 00:00:00 2001
From: Andi Kleen <andi@firstfloor.org>
Date: Sat, 1 May 2021 22:21:59 -0700
Subject: [PATCH] fixup! btf: Fix up btf_ids.h for gcc lto

---
 Documentation/bpf/btf.rst |  4 ++++
 fs/open.c                 |  2 +-
 include/linux/btf_ids.h   | 18 +++++++++---------
 kernel/bpf/btf.c          |  1 +
 kernel/bpf/map_iter.c     |  1 +
 kernel/bpf/prog_iter.c    |  1 +
 kernel/bpf/task_iter.c    |  1 +
 net/core/filter.c         |  2 ++
 net/ipv6/route.c          |  1 +
 net/netlink/af_netlink.c  |  1 +
 10 files changed, 22 insertions(+), 10 deletions(-)

diff --git a/Documentation/bpf/btf.rst b/Documentation/bpf/btf.rst
index 44dc789de2b4..ee59e827d108 100644
--- a/Documentation/bpf/btf.rst
+++ b/Documentation/bpf/btf.rst
@@ -706,6 +706,9 @@ with following syntax::
   BTF_ID_LIST(list)
   BTF_ID(type1, name1)
   BTF_ID(type2, name2)
+  BTF_ID_LIST_END
+
+The unsorted list must be terminated with ``BTF_ID_LIST_END``.
 
 resulting in following layout in .BTF_ids section::
 
@@ -723,6 +726,7 @@ want to define unused entry in BTF_ID_LIST, like::
       BTF_ID(struct, sk_buff)
       BTF_ID_UNUSED
       BTF_ID(struct, task_struct)
+      BTF_ID_LIST_END
 
 The ``BTF_SET_START/END`` macros pair defines sorted list of BTF ID values
 and their count, with following syntax::
diff --git a/fs/open.c b/fs/open.c
index e53af13b5835..f15eec2d4af7 100644
--- a/fs/open.c
+++ b/fs/open.c
@@ -66,7 +66,7 @@ int do_truncate(struct user_namespace *mnt_userns, struct dentry *dentry,
 	return ret;
 }
 
-long vfs_truncate(const struct path *path, loff_t length)
+__visible long vfs_truncate(const struct path *path, loff_t length)
 {
 	struct user_namespace *mnt_userns;
 	struct inode *inode;
diff --git a/include/linux/btf_ids.h b/include/linux/btf_ids.h
index 69fabb8ceb03..58e760eea625 100644
--- a/include/linux/btf_ids.h
+++ b/include/linux/btf_ids.h
@@ -25,14 +25,13 @@ struct btf_id_set {
 #define BTF_IDS_SECTION ".BTF_ids"
 
 #define ____BTF_ID(symbol)				\
-asm(							\
 ".pushsection " BTF_IDS_SECTION ",\"a\";       \n"	\
 ".globl " #symbol " ;                          \n"	\
 ".type  " #symbol ", STT_OBJECT;               \n"	\
 ".size  " #symbol ", 4;                        \n"	\
 #symbol ":                                     \n"	\
 ".zero 4                                       \n"	\
-".popsection;                                  \n");
+".popsection;                                  \n"
 
 #define __BTF_ID(symbol) \
 	____BTF_ID(symbol)
@@ -47,6 +46,8 @@ asm(							\
 #define BTF_ID(prefix, name) \
 	__BTF_ID(__ID(__BTF_ID__##prefix##__##name##__))
 
+#define BTF_ID_LIST_END );
+
 /*
  * The BTF_ID_LIST macro defines pure (unsorted) list
  * of BTF IDs, with following layout:
@@ -67,11 +68,11 @@ asm(							\
 ".pushsection " BTF_IDS_SECTION ",\"a\";       \n"	\
 "." #scope " " #name ";                        \n"	\
 #name ":;                                      \n"	\
-".popsection;                                  \n");
+".popsection;                                  \n"
 
 #define BTF_ID_LIST(name)				\
+extern u32 name[];					\
 __BTF_ID_LIST(name, globl)				\
-extern u32 name[];
 
 #define BTF_ID_LIST_GLOBAL(name)			\
 __BTF_ID_LIST(name, globl)
@@ -80,8 +81,9 @@ __BTF_ID_LIST(name, globl)
  * a single entry.
  */
 #define BTF_ID_LIST_SINGLE(name, prefix, typename)	\
-	BTF_ID_LIST(name) \
-	BTF_ID(prefix, typename)
+	BTF_ID_LIST(name)	 \
+	BTF_ID(prefix, typename) \
+	BTF_ID_LIST_END
 
 /*
  * The BTF_ID_UNUSED macro defines 4 zero bytes.
@@ -95,10 +97,9 @@ __BTF_ID_LIST(name, globl)
  */
 
 #define BTF_ID_UNUSED					\
-asm(							\
 ".pushsection " BTF_IDS_SECTION ",\"a\";       \n"	\
 ".zero 4                                       \n"	\
-".popsection;                                  \n");
+".popsection;                                  \n"
 
 /*
  * The BTF_SET_START/END macros pair defines sorted list of
@@ -119,7 +120,6 @@ asm(							\
  *
  */
 #define __BTF_SET_START(name, scope)			\
-asm(							\
 ".pushsection " BTF_IDS_SECTION ",\"a\";       \n"	\
 "." #scope " __BTF_ID__set__" #name ";         \n"	\
 "__BTF_ID__set__" #name ":;                    \n"	\
diff --git a/kernel/bpf/btf.c b/kernel/bpf/btf.c
index b1a76fe046cb..4e79f698948e 100644
--- a/kernel/bpf/btf.c
+++ b/kernel/bpf/btf.c
@@ -4407,6 +4407,7 @@ static int btf_translate_to_vmlinux(struct bpf_verifier_log *log,
 
 BTF_ID_LIST(bpf_ctx_convert_btf_id)
 BTF_ID(struct, bpf_ctx_convert)
+BTF_ID_LIST_END
 
 struct btf *btf_parse_vmlinux(void)
 {
diff --git a/kernel/bpf/map_iter.c b/kernel/bpf/map_iter.c
index 6a9542af4212..548180dc42c8 100644
--- a/kernel/bpf/map_iter.c
+++ b/kernel/bpf/map_iter.c
@@ -80,6 +80,7 @@ static const struct seq_operations bpf_map_seq_ops = {
 
 BTF_ID_LIST(btf_bpf_map_id)
 BTF_ID(struct, bpf_map)
+BTF_ID_LIST_END
 
 static const struct bpf_iter_seq_info bpf_map_seq_info = {
 	.seq_ops		= &bpf_map_seq_ops,
diff --git a/kernel/bpf/prog_iter.c b/kernel/bpf/prog_iter.c
index 53a73c841c13..f9ea2dc32888 100644
--- a/kernel/bpf/prog_iter.c
+++ b/kernel/bpf/prog_iter.c
@@ -80,6 +80,7 @@ static const struct seq_operations bpf_prog_seq_ops = {
 
 BTF_ID_LIST(btf_bpf_prog_id)
 BTF_ID(struct, bpf_prog)
+BTF_ID_LIST_END
 
 static const struct bpf_iter_seq_info bpf_prog_seq_info = {
 	.seq_ops		= &bpf_prog_seq_ops,
diff --git a/kernel/bpf/task_iter.c b/kernel/bpf/task_iter.c
index b68cb5d6d6eb..99cc112d6360 100644
--- a/kernel/bpf/task_iter.c
+++ b/kernel/bpf/task_iter.c
@@ -528,6 +528,7 @@ BTF_ID_LIST(btf_task_file_ids)
 BTF_ID(struct, task_struct)
 BTF_ID(struct, file)
 BTF_ID(struct, vm_area_struct)
+BTF_ID_LIST_END
 
 static const struct bpf_iter_seq_info task_seq_info = {
 	.seq_ops		= &task_seq_ops,
diff --git a/net/core/filter.c b/net/core/filter.c
index 9323d34d34cc..46f78b3c605e 100644
--- a/net/core/filter.c
+++ b/net/core/filter.c
@@ -10479,6 +10479,7 @@ BTF_ID_LIST_GLOBAL(btf_sock_ids)
 #define BTF_SOCK_TYPE(name, type) BTF_ID(struct, type)
 BTF_SOCK_TYPE_xxx
 #undef BTF_SOCK_TYPE
+BTF_ID_LIST_END
 #else
 u32 btf_sock_ids[MAX_BTF_SOCK_TYPE];
 #endif
@@ -10601,6 +10602,7 @@ BPF_CALL_1(bpf_sock_from_file, struct file *, file)
 BTF_ID_LIST(bpf_sock_from_file_btf_ids)
 BTF_ID(struct, socket)
 BTF_ID(struct, file)
+BTF_ID_LIST_END
 
 const struct bpf_func_proto bpf_sock_from_file_proto = {
 	.func		= bpf_sock_from_file,
diff --git a/net/ipv6/route.c b/net/ipv6/route.c
index 373d48073106..6db42e5b1394 100644
--- a/net/ipv6/route.c
+++ b/net/ipv6/route.c
@@ -6471,6 +6471,7 @@ DEFINE_BPF_ITER_FUNC(ipv6_route, struct bpf_iter_meta *meta, struct fib6_info *r
 
 BTF_ID_LIST(btf_fib6_info_id)
 BTF_ID(struct, fib6_info)
+BTF_ID_LIST_END
 
 static const struct bpf_iter_seq_info ipv6_route_seq_info = {
 	.seq_ops		= &ipv6_route_seq_ops,
diff --git a/net/netlink/af_netlink.c b/net/netlink/af_netlink.c
index 3a62f97acf39..3abcf2d12e3b 100644
--- a/net/netlink/af_netlink.c
+++ b/net/netlink/af_netlink.c
@@ -2838,6 +2838,7 @@ static const struct rhashtable_params netlink_rhashtable_params = {
 #if defined(CONFIG_BPF_SYSCALL) && defined(CONFIG_PROC_FS)
 BTF_ID_LIST(btf_netlink_sock_id)
 BTF_ID(struct, netlink_sock)
+BTF_ID_LIST_END
 
 static const struct bpf_iter_seq_info netlink_seq_info = {
 	.seq_ops		= &netlink_seq_ops,
