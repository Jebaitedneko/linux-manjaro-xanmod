From 8bd3d802fff27d2819d5258450a04b0b5ce55dfc Mon Sep 17 00:00:00 2001
From: Andi Kleen <andi@firstfloor.org>
Date: Sun, 2 May 2021 07:10:06 -0700
Subject: [PATCH] fixup! x86/lto: Mark 32bit mem{cpy,move,set} __used

---
 arch/x86/boot/compressed/string.c | 4 ++--
 1 file changed, 2 insertions(+), 2 deletions(-)

diff --git a/arch/x86/boot/compressed/string.c b/arch/x86/boot/compressed/string.c
index 81fc1eaa3229..05aa7a05e152 100644
--- a/arch/x86/boot/compressed/string.c
+++ b/arch/x86/boot/compressed/string.c
@@ -50,7 +50,7 @@ void *memset(void *s, int c, size_t n)
 	return s;
 }
 
-void *memmove(void *dest, const void *src, size_t n)
+__visible __used void *memmove(void *dest, const void *src, size_t n)
 {
 	unsigned char *d = dest;
 	const unsigned char *s = src;
@@ -65,7 +65,7 @@ void *memmove(void *dest, const void *src, size_t n)
 }
 
 /* Detect and warn about potential overlaps, but handle them with memmove. */
-void *memcpy(void *dest, const void *src, size_t n)
+__visible __used void *memcpy(void *dest, const void *src, size_t n)
 {
 	if (dest > src && dest - src < n) {
 		warn("Avoiding potentially unsafe overlapping memcpy()!");
