From 3cacfcf74a905bfcdd5536aacfe7333374dbec2e Mon Sep 17 00:00:00 2001
From: Andi Kleen <andi@firstfloor.org>
Date: Sat, 1 May 2021 07:47:08 -0700
Subject: [PATCH] modpost: Remove .lto_priv.0 for pattern checks

gcc LTO sometimes adds .lto_priv.0 to symbols. This confuses the various
section pattern checks in modpost. Remove any .lto_priv.0 postfix before
checking patterns.

Signed-off-by: Andi Kleen <andi@firstfloor.org>
---
 scripts/mod/modpost.c | 22 +++++++++++++++++++++-
 1 file changed, 21 insertions(+), 1 deletion(-)

diff --git a/scripts/mod/modpost.c b/scripts/mod/modpost.c
index 24725e50c7b4..3ba0e69708b6 100644
--- a/scripts/mod/modpost.c
+++ b/scripts/mod/modpost.c
@@ -1559,6 +1559,20 @@ static void report_sec_mismatch(const char *modname,
 	fprintf(stderr, "\n");
 }
 
+/* For checks remove .lto_priv.0 which is added randomly by gcc LTO */
+
+static char *cleansym(const char *sym)
+{
+	char *nsym = strdup(sym);
+	char *p;
+	if (!nsym)
+		exit(ENOMEM);
+	p = strstr(nsym, ".lto_priv.0");
+	if (p && p[11] == 0)
+		*p = 0;
+	return nsym;
+}
+
 static void default_mismatch_handler(const char *modname, struct elf_info *elf,
 				     const struct sectioncheck* const mismatch,
 				     Elf_Rela *r, Elf_Sym *sym, const char *fromsec)
@@ -1568,6 +1582,7 @@ static void default_mismatch_handler(const char *modname, struct elf_info *elf,
 	Elf_Sym *from;
 	const char *tosym;
 	const char *fromsym;
+	char *fromsym_clean, *tosym_clean;
 
 	from = find_elf_symbol2(elf, r->r_offset, fromsec);
 	fromsym = sym_name(elf, from);
@@ -1579,14 +1594,19 @@ static void default_mismatch_handler(const char *modname, struct elf_info *elf,
 	to = find_elf_symbol(elf, r->r_addend, sym);
 	tosym = sym_name(elf, to);
 
+	fromsym_clean = cleansym(fromsym);
+	tosym_clean = cleansym(tosym);
+
 	/* check whitelist - we may ignore it */
 	if (secref_whitelist(mismatch,
-			     fromsec, fromsym, tosec, tosym)) {
+			     fromsec, fromsym_clean, tosec, tosym_clean)) {
 		report_sec_mismatch(modname, mismatch,
 				    fromsec, r->r_offset, fromsym,
 				    is_function(from), tosec, tosym,
 				    is_function(to));
 	}
+	free(fromsym_clean);
+	free(tosym_clean);
 }
 
 static int is_executable_section(struct elf_info* elf, unsigned int section_index)
